name: C/C++ win

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: windows-2019

    steps:
      - uses: shogo82148/actions-setup-perl@v1
        with:
          perl-version: "5.18"
          distribution: strawberry
      - run: perl -V
      - uses: actions/checkout@v3
      - name: Cache dependencies
        id: cache
        uses: actions/cache@v3
        with:
          # 缓存的键，用于区分不同的缓存项
          path: download
          key: ${{ runner.os }}-download
      - name: configure
        run: mkdir build; cd build; cmake --version; cmake .. -DCMAKE_INSTALL_PREFIX=dist
      - name: make
        run: cd build; cmake --build . --config release
      - name: Compress build output
        run: |
          zip -r dist-win.tgz build/
      - name: Upload build artifact
        uses: actions/upload-artifact@v2
        with:
          name: build-artifact
          path: dist-win.tgz
      - name: Save cache
        if: steps.cache.outputs.cache-hit != 'true'  # 只有在缓存未命中时才保存缓存
        run: |
          # 这里不需要额外的命令，因为我们已经使用 `actions/cache` Action 来缓存生成的数据
          echo "Caching generated data..."